<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Side Message</title>
    <!-- Add your CSS for styling messages -->
    <style>
        /* Style messages to make them look like Facebook Messenger */
        .message-container {
            max-width: 400px;
            margin: 20px auto;
            padding: 10px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .sender {
            text-align: right;
            background-color: #0084ff;
            color: #fff;
        }

        .receiver {
            text-align: left;
            background-color: #e5e5ea;
            color: #000;
        }

        /* Style input field and send button */
        .message-input {
            width: 100%;
            padding: 10px;
            margin-top: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }

        .send-button {
            display: block;
            width: 100%;
            padding: 10px;
            margin-top: 10px;
            background-color: #0084ff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="message-container">
        <!-- Messages will be displayed here -->
    </div>

    <!-- Form for sending messages -->
    <form id="message-form">
        <input type="text" id="message-input" class="message-input" placeholder="Type your message...">
        <button type="submit" class="send-button">Send</button>
    </form>

    <script>
        const guidelineGiverId = '<%= guidelineGiverId %>'; // Assuming this value is passed from the server

        async function fetchAndDisplayMessages() {
            try {
                const response = await fetch(`/student/message?guidelineGiverId=${guidelineGiverId}`);
                const messages = await response.json();

                const messageContainer = document.getElementById('message-container');
                messageContainer.innerHTML = '';

                messages.forEach(message => {
                    const messageDiv = document.createElement('div');
                    messageDiv.classList.add('message-container');
                    messageDiv.classList.add(message.sender_role === 'sender' ? 'sender' : 'receiver');
                    messageDiv.innerHTML = `<p>${message.message_text}</p>`;
                    messageContainer.appendChild(messageDiv);
                });
            } catch (error) {
                console.error('Error fetching and displaying messages:', error);
            }
        }

        window.addEventListener('load', fetchAndDisplayMessages);

        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');

        messageForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const messageText = messageInput.value.trim();

            try {
                const response = await fetch('/send-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ messageText, guidelineGiverId })
                });

                if (response.ok) {
                    messageInput.value = '';
                    await fetchAndDisplayMessages();
                } else {
                    console.error('Failed to send message');
                }
            } catch (error) {
                console.error('Error sending message:', error);
            }
        });
    </script>
</body>
</html>
