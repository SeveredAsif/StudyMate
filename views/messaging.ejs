<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <!-- Include Bootstrap CSS for styling -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Include Font Awesome for icons -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        /* Chat container */
        .chat-container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
        }
        
        /* Sender message */
        .sender-message {
            background-color: #DCF8C6;
            padding: 10px;
            border-radius: 10px;
            display: inline-block;
            max-width: 70%;
            margin-bottom: 10px;
        }
        
        /* Receiver message */
        .receiver-message {
            background-color: #EAEAEA;
            padding: 10px;
            border-radius: 10px;
            display: inline-block;
            max-width: 70%;
            margin-bottom: 10px;
        }
        
        /* Message input */
        .message-input {
            width: calc(100% - 80px);
        }
        
        /* Send button */
        .send-button {
            width: 80px;
        }
        .message-container {
        display: block; /* Ensure each message appears on its own line */
        margin-bottom: 10px; /* Add margin between messages */
    }
    </style>
</head>
<body>
    <div class="chat-container">
        <h1>Chat</h1>
        
        <!-- Message container -->
        <div id="messageContainer">
            <% messages.forEach(message => { %>
                <div class="message-container <% if (message.sender_role === 'sender') { %>sender-message<% } else { %>receiver-message<% } %>">
                    <%= message.message_text %>
                </div><br>
            <% }); %>
        </div>
        
        <!-- Message input and send button -->
        <form id="messageForm" class="mt-3">
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control message-input" placeholder="Type your message...">
                <button type="submit" class="btn btn-primary send-button"><i class="fas fa-paper-plane"></i></button>
            </div>
        </form>
    </div>
    
    <!-- Include Bootstrap and Font Awesome JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    
    <!-- Custom JavaScript for auto-refreshing messages -->
    <script>
        const messageContainer = document.getElementById('messageContainer');
        const guidelineGiverId = '<%= guidelineGiverId %>'; // Get the guideline giver ID from EJS
        
        async function fetchAndRenderMessages() {
            try {
                const response = await fetch(`/get-messages?guidelineGiverId=${guidelineGiverId}`); // Adjust the route as needed
                if (response.ok) {
                    const data = await response.json();
                    renderMessages(data.messages);
                } else {
                    console.error('Failed to fetch messages:', response.statusText);
                }
            } catch (error) {
                console.error('Error fetching messages:', error);
            }
        }

        function renderMessages(messages) {
            messageContainer.innerHTML = ''; // Clear existing messages

            messages.forEach(message => {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message-container');
                messageElement.classList.add(message.sender_role === 'sender' ? 'sender-message' : 'receiver-message');
                messageElement.textContent = message.message_text;
                messageContainer.appendChild(messageElement);
            });
        }

        // Fetch and render messages initially
        fetchAndRenderMessages();

        // Set interval to fetch and render messages every 5 seconds
        setInterval(fetchAndRenderMessages, 5000);
        
        // Handle message form submission
        const messageForm = document.getElementById('messageForm');
        messageForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value;
            
            const response = await fetch('/send-message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: message, guidelineGiverId: guidelineGiverId })
            });
            
            if (response.ok) {
                messageInput.value = ''; // Clear input after sending
                // Fetch and render messages after sending
                fetchAndRenderMessages();
            }
        });
    </script>
</body>
</html>



