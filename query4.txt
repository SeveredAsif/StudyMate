

CREATE OR REPLACE PROCEDURE update_lecture(
    IN p_lecture_id INT,
    IN p_lecture_name VARCHAR,
    IN p_description TEXT,
    IN p_videolink VARCHAR,
    IN p_pdflink VARCHAR,
	OUT p_status_message VARCHAR
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Retrieve the current attributes of the lecture
    DECLARE
        v_previous_lecture_name VARCHAR;
        v_previous_description TEXT;
        v_previous_videolink VARCHAR;
        v_previous_pdflink VARCHAR;
		v_previous_teacher_id INTEGER;
		v_previous_course_id INTEGER;
        v_new_pdflink VARCHAR;
        v_new_videolink VARCHAR;
		
    BEGIN
        SELECT lecture_name, description, videolink, pdflink,course_id,teacher_id
        INTO v_previous_lecture_name, v_previous_description, v_previous_videolink, v_previous_pdflink,
		v_previous_course_id,v_previous_teacher_id
        FROM lecture
        WHERE lecture_id = p_lecture_id;
        
        -- Check if any of the attributes are different
        IF v_previous_lecture_name != p_lecture_name OR
           v_previous_description != p_description OR
           v_previous_videolink != p_videolink OR
           v_previous_pdflink != p_pdflink
        THEN
            -- Generate new filenames for video and PDF
            v_new_videolink := 'video_' || p_lecture_id || '_'||v_previous_course_id||'_'||v_previous_teacher_id||'.mp4';
            v_new_pdflink := 'pdf_' || p_lecture_id || '_'||v_previous_course_id||'_'||v_previous_teacher_id|| '.pdf';
            
            -- If any attribute is different, update the lecture with the new attributes
            UPDATE lecture
            SET lecture_name = p_lecture_name,
                description = p_description,
                videolink = v_new_videolink,
                pdflink = v_new_pdflink
            WHERE lecture_id = p_lecture_id;
		    p_status_message := 'Lecture updated successfully';
        ELSE
            -- Set status message
            p_status_message := 'No changes were made to the lecture';
        END IF;
    END;
END;
$$;


alter table courses
drop column enrolled_id;


ALTER TABLE watched
ADD COLUMN course_id INT;

ALTER TABLE watched
ADD CONSTRAINT fk_watched_course_id
FOREIGN KEY (course_id)
REFERENCES courses(id);

DO $$
DECLARE
    constraint_rec RECORD;
    drop_sql TEXT;
    create_sql TEXT;
    has_constraints BOOLEAN := FALSE;
BEGIN
    -- Check if there are existing foreign key constraints without ON DELETE CASCADE
    FOR constraint_rec IN (
        SELECT constraint_name, table_schema, table_name
        FROM information_schema.table_constraints
        WHERE constraint_type = 'FOREIGN KEY'
        AND constraint_schema = 'public'  -- Adjust schema name if necessary
        AND constraint_name NOT IN (
            SELECT constraint_name
            FROM information_schema.referential_constraints
            WHERE delete_rule = 'CASCADE'
            AND constraint_schema = 'public'  -- Adjust schema name if necessary
        )
    ) LOOP
        has_constraints := TRUE;
        
        drop_sql := 'ALTER TABLE ' || constraint_rec.table_schema || '.' || constraint_rec.table_name ||
                    ' DROP CONSTRAINT ' || constraint_rec.constraint_name || ' CASCADE;';
        
        EXECUTE drop_sql;
        
        create_sql := 'ALTER TABLE ' || constraint_rec.table_schema || '.' || constraint_rec.table_name ||
                      ' ADD CONSTRAINT ' || constraint_rec.constraint_name || 
                      ' FOREIGN KEY ' || pg_get_constraintdef(pg_constraint.oid, true) ||
                      ' ON DELETE CASCADE;';
        
        EXECUTE create_sql;
        
        RAISE NOTICE 'Constraint % on table % modified.', constraint_rec.constraint_name, constraint_rec.table_name;
    END LOOP;
    
    -- Create the new table with foreign key constraints
    IF has_constraints THEN
        -- Add your table creation SQL statement here
        RAISE NOTICE 'New table created with ON DELETE CASCADE for existing foreign key constraints.';
    ELSE
        -- Add your table creation SQL statement here without modification
        RAISE NOTICE 'New table created without any changes to foreign key constraints.';
    END IF;
END $$;


CREATE OR REPLACE FUNCTION ddl_event_trigger_function() RETURNS event_trigger AS $$
DECLARE
    obj record;
BEGIN
    FOR obj IN SELECT * FROM pg_event_trigger_ddl_commands() LOOP
        RAISE NOTICE 'DDL Event: %', obj.command_tag;
    END LOOP;
END;
$$ LANGUAGE plpgsql;


CREATE EVENT TRIGGER ddl_event_trigger
ON ddl_command_end
EXECUTE PROCEDURE ddl_event_trigger_function();




CREATE OR REPLACE FUNCTION cascade_delete_dependent_rows()
RETURNS TRIGGER AS $$
BEGIN
    -- Delete rows from enrollments table
    DELETE FROM enrollments WHERE course_id = OLD.id;
	DELETE FROM watched WHERE course_id=OLD.id;
    DELETE FROM lecture WHERE course_id = OLD.id;
	DELETE from topper where exam_id in(
	SELECT id FROM exam_section
	WHERE course_id = OLD.id
	);
	DELETE FROM result where exam_id in(
	SELECT id FROM exam_section
	WHERE course_id = OLD.id
	);
	DELETE FROM choice WHERE question_id in
	(SELECT question_id FROM question
	where exam_id in (
		SELECT id FROM exam_section
	    WHERE course_id = OLD.id
	));
	DELETE FROM question 
	WHERE exam_id in( SELECT id FROM exam_section
					WHERE course_id = OLD.id);
					
    DELETE FROM exam_section WHERE course_id = OLD.id;
    DELETE FROM rate WHERE course_id = OLD.id;
	
	

    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for cascading deletes on the courses table
CREATE TRIGGER cascade_delete_trigger
BEFORE DELETE ON courses
FOR EACH ROW
EXECUTE FUNCTION cascade_delete_dependent_rows();
