ALTER TABLE routine
ADD COLUMN student_id INT REFERENCES student(student_id) ON DELETE CASCADE;


ALTER TABLE routine
ADD CONSTRAINT unique_routine_combination UNIQUE (start_time, end_time, student_id),
ADD FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE;


CREATE OR REPLACE FUNCTION check_routine_constraint()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM routine
        WHERE ((start_time <= NEW.start_time AND NEW.start_time<=end_time) OR
           (start_time <= NEW.end_time AND  NEW.end_time<=end_time) OR
           NEW.start_time<=NEW.end_time)
          AND student_id = NEW.student_id
    ) THEN
        RAISE EXCEPTION 'Routine with the same start time, end time, and student ID already exists';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER before_insert_routine
BEFORE INSERT ON routine
FOR EACH ROW
EXECUTE FUNCTION check_routine_constraint();






//fix korar try check routine check_routine_constraint


CREATE OR REPLACE FUNCTION check_routine_constraint()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM routine
        WHERE (start_time <= NEW.start_time AND NEW.start_time <= end_time) OR
              (start_time <= NEW.end_time AND NEW.end_time <= end_time)
              AND student_id = NEW.student_id
    ) THEN
        RAISE EXCEPTION 'Routine with the same start time, end time, and student ID already exists';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;



//fix korar try check routine check_routine_constraint


CREATE OR REPLACE FUNCTION check_routine_constraint()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM routine
        WHERE ((start_time <= NEW.start_time AND NEW.start_time <= end_time) OR
              (start_time <= NEW.end_time AND NEW.end_time <= end_time))
              AND student_id = NEW.student_id
    ) THEN
        RAISE EXCEPTION 'Routine with the same start time, end time, and student ID already exists';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;



//profile pic for students
ALTER TABLE student
ADD COLUMN profilePicLink VARCHAR(255); -- Assuming the link is stored as a VARCHAR

-- Step 2: Update each row to set the profile picture link based on the conditions
UPDATE student
SET profilePicLink = CASE 
                        WHEN student_id % 2 = 0 THEN 'first_pic'
                        WHEN student_id % 3 = 0 THEN 'second_pic'
						WHEN student_id % 5 = 0 THEN 'third_pic'
						WHEN student_id % 7 = 0 THEN 'fourth_pic'
						ELSE 'student'||(student_id % 10)
                     END;

//profile pic for teachers
ALTER TABLE teacher
ADD COLUMN profilePicLink VARCHAR(255); 

UPDATE teacher
SET profilePicLink = 'teacher'||(teacher_id % 10);


//asif
CREATE OR REPLACE FUNCTION check_routine_constraint()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM routine
        WHERE ((start_time <= NEW.start_time AND NEW.start_time <= end_time) OR
              (start_time <= NEW.end_time AND NEW.end_time <= end_time))
              AND student_id = NEW.student_id
    ) THEN
        RAISE EXCEPTION 'Routine with the same start time, end time, and student ID already exists';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


ALTER TABLE study_hour
ADD COLUMN student_id INTEGER,
ADD CONSTRAINT fk_student_id FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE;

